/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::core::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const MAP_FAILED: u32 = 4294967295;
pub const PROT_NONE: u32 = 0;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_FIXED: u32 = 16;
pub const MAP_ANONYMOUS: u32 = 32;
pub const MAP_ANON: u32 = 32;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGBUS: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGUSR1: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGUSR2: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGSTKFLT: u32 = 16;
pub const SIGCHLD: u32 = 17;
pub const SIGCONT: u32 = 18;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGURG: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGPWR: u32 = 30;
pub const SIGSYS: u32 = 31;
pub const SIGUNUSED: u32 = 31;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_RESTORER: u32 = 67108864;
pub const SIG_DFL: u32 = 0;
pub const SIG_IGN: u32 = 1;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const NSIG: u32 = 42;
pub const FD_SETSIZE: u32 = 0;
pub const RUSAGE_SELF: u32 = 42;
pub const RUSAGE_CHILDREN: u32 = 42;
pub const RLIMIT_CORE: u32 = 0;
pub const RLIMIT_CPU: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_FSIZE: u32 = 3;
pub const RLIMIT_NOFILE: u32 = 4;
pub const RLIMIT_STACK: u32 = 5;
pub const RLIMIT_AS: u32 = 6;
pub const __SOCKET: u32 = 1;
pub const __BIND: u32 = 2;
pub const __CONNECT: u32 = 3;
pub const __LISTEN: u32 = 4;
pub const __ACCEPT: u32 = 5;
pub const __SEND: u32 = 9;
pub const __RECV: u32 = 10;
pub const __SENDTO: u32 = 11;
pub const __RECVFROM: u32 = 12;
pub const __SHUTDOWN: u32 = 13;
pub const AF_UNIX: u32 = 1;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const S_IFMT: u32 = 61440;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFLNK: u32 = 40960;
pub const S_IFREG: u32 = 32768;
pub const S_IFBLK: u32 = 24576;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFIFO: u32 = 4096;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const U32_MAX: u32 = 4294967295;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const _POSIX_VERSION: u32 = 200809;
pub const F_OK: u32 = 42;
pub const R_OK: u32 = 42;
pub const W_OK: u32 = 42;
pub const X_OK: u32 = 42;
pub const F_DUPFD: u32 = 42;
pub const F_DUPFD_CLOEXEC: u32 = 42;
pub const F_GETFD: u32 = 42;
pub const F_SETFD: u32 = 42;
pub const F_GETFL: u32 = 42;
pub const F_SETFL: u32 = 42;
pub const F_GETLK: u32 = 42;
pub const F_SETLK: u32 = 42;
pub const F_SETLKW: u32 = 42;
pub const F_GETOWN: u32 = 42;
pub const F_SETOWN: u32 = 42;
pub const FD_CLOEXEC: u32 = 42;
pub const F_RDLCK: u32 = 42;
pub const F_UNLCK: u32 = 42;
pub const F_WRLCK: u32 = 42;
pub const __GNUC_VA_LIST: u32 = 1;
pub const BUFSIZ: u32 = 1;
pub const SEEK_CUR: u32 = 42;
pub const SEEK_END: u32 = 42;
pub const SEEK_SET: u32 = 42;
pub const EOF: i32 = -1;
pub const O_CLOEXEC: u32 = 42;
pub const O_CREAT: u32 = 42;
pub const O_DIRECTORY: u32 = 42;
pub const O_EXCL: u32 = 42;
pub const O_NOCTTY: u32 = 42;
pub const O_NOFOLLOW: u32 = 42;
pub const O_TRUNC: u32 = 42;
pub const O_TTY_INIT: u32 = 42;
pub const O_APPEND: u32 = 42;
pub const O_DSYNC: u32 = 42;
pub const O_NONBLOCK: u32 = 42;
pub const O_RSYNC: u32 = 42;
pub const O_SYNC: u32 = 42;
pub const O_ACCMODE: u32 = 42;
pub const O_EXEC: u32 = 42;
pub const O_RDONLY: u32 = 42;
pub const O_RDWR: u32 = 42;
pub const O_SEARCH: u32 = 42;
pub const O_WRONLY: u32 = 42;
pub const AT_FDCWD: u32 = 42;
pub const AT_EACCESS: u32 = 42;
pub const AT_SYMLINK_NOFOLLOW: u32 = 42;
pub const AT_SYMLINK_FOLLOW: u32 = 42;
pub const AT_REMOVEDIR: u32 = 42;
pub const POSIX_FADV_DONTNEED: u32 = 42;
pub const POSIX_FADV_NOREUSE: u32 = 42;
pub const POSIX_FADV_NORMAL: u32 = 42;
pub const POSIX_FADV_RANDOM: u32 = 42;
pub const POSIX_FADV_SEQUENTIAL: u32 = 42;
pub const POSIX_FADV_WILLNEED: u32 = 42;
pub const LC_ALL: &'static [u8; 2usize] = b"C\0";
pub const LC_CTYPE: &'static [u8; 2usize] = b"C\0";
pub const CODESET: u32 = 42;
pub const NAME_MAX: u32 = 4096;
pub const PATH_MAX: u32 = 4096;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 1;
pub const HUGE_VAL: f64 = 42.0;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const ECHOCTL: u32 = 42;
pub const CRMOD: u32 = 42;
pub const TIOCGETP: u32 = 42;
pub const TIOCSETN: u32 = 42;
pub const CBREAK: u32 = 42;
pub const ECHO: u32 = 42;
pub const ANYP: u32 = 42;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 32767;
pub const MB_CUR_MAX: u32 = 42;
pub const NCCS: u32 = 42;
pub const ISIG: u32 = 42;
pub const TCSAFLUSH: u32 = 42;
pub const EXIT: u32 = 1;
pub const FORK: u32 = 2;
pub const READ: u32 = 3;
pub const WRITE: u32 = 4;
pub const CLOSE: u32 = 6;
pub const WAITPID: u32 = 7;
pub const UNLINK: u32 = 10;
pub const EXECVE: u32 = 11;
pub const GETPID: u32 = 20;
pub const GETUID: u32 = 24;
pub const PAUSE: u32 = 29;
pub const KILL: u32 = 37;
pub const SIGNAL: u32 = 48;
pub const SETPGID: u32 = 57;
pub const GETPPID: u32 = 64;
pub const GETPGRP: u32 = 65;
pub const SIGACTION: u32 = 67;
pub const SIGSUSPEND: u32 = 72;
pub const REBOOT: u32 = 88;
pub const MMAP: u32 = 90;
pub const MUNMAP: u32 = 91;
pub const SOCKETCALL: u32 = 102;
pub const MPROTECT: u32 = 125;
pub const SIGPROCMASK: u32 = 126;
pub const GETPGID: u32 = 132;
pub const NANOSLEEP: u32 = 162;
pub const SHUTDOWN: u32 = 293;
pub const CLONE: u32 = 120;
pub const EXIT_QEMU: u32 = 2147483650;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type gid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_typed_mem_info {
    pub posix_tmi_length: usize,
}
pub type sighandler_t = ::core::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: ::std::os::raw::c_int,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut ::std::os::raw::c_int,
}
pub type mcontext_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: usize,
    pub ss_flags: ::std::os::raw::c_int,
}
pub type stack_t = stack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext {
    pub uc_link: *mut ucontext,
    pub uc_sigmask: ::std::os::raw::c_uint,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
}
pub type ucontext_t = ucontext;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: ::std::os::raw::c_int,
    pub si_uid: ::std::os::raw::c_int,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: ::std::os::raw::c_int,
    pub si_stime: ::std::os::raw::c_int,
    pub si_value: sigval_t,
    pub si_int: ::std::os::raw::c_int,
    pub si_ptr: *mut ::std::os::raw::c_void,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_band: ::std::os::raw::c_int,
    pub si_fd: ::std::os::raw::c_int,
}
pub type siginfo_t = siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __bindgen_anon_1: sigaction__bindgen_ty_1,
    pub sa_mask: ::std::os::raw::c_uint,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: ::core::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sa_sigaction: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: ::std::os::raw::c_int,
    pub tv_usec: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fd_set {}
pub type fd_set = _fd_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
pub type rlim_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    _unused: [u8; 0],
}
pub type socklen_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: ::std::os::raw::c_int,
    pub st_ino: ::std::os::raw::c_uint,
    pub st_mode: ::std::os::raw::c_int,
    pub st_nlink: ::std::os::raw::c_int,
    pub st_uid: ::std::os::raw::c_int,
    pub st_gid: gid_t,
    pub st_rdev: ::std::os::raw::c_int,
    pub st_size: ::std::os::raw::c_uint,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub st_blksize: ::std::os::raw::c_int,
    pub st_blocks: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: ::std::os::raw::c_int,
    pub tms_stime: ::std::os::raw::c_int,
    pub tms_cutime: ::std::os::raw::c_int,
    pub tms_cstime: ::std::os::raw::c_int,
}
pub type s8 = ::std::os::raw::c_schar;
pub type u8 = ::std::os::raw::c_uchar;
pub type s16 = ::std::os::raw::c_short;
pub type u16 = ::std::os::raw::c_ushort;
pub type s32 = ::std::os::raw::c_int;
pub type u32 = ::std::os::raw::c_uint;
pub type bool_ = ::std::os::raw::c_int;
pub const idtype_P_ALL: idtype = 0;
pub const idtype_P_PGID: idtype = 1;
pub const idtype_P_PID: idtype = 2;
pub type idtype = u32;
pub use self::idtype as idtype_t;
pub type locale_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DIR {
    pub bonjour_dir: ::std::os::raw::c_int,
}
pub type DIR = _DIR;
#[repr(C)]
#[derive(Debug)]
pub struct dirent {
    pub d_ino: ::std::os::raw::c_uint,
    pub d_name: __IncompleteArrayField<::std::os::raw::c_char>,
}
extern "C" {
    pub static mut errno: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
pub type useconds_t = ::std::os::raw::c_int;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FILE {
    pub fd: ::std::os::raw::c_int,
}
pub type fpos_t = usize;
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stdin: *mut FILE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: ::std::os::raw::c_uint,
    pub l_len: ::std::os::raw::c_uint,
    pub l_pid: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
pub type imaxdiv_t = imaxdiv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
}
pub type nl_catd = ::std::os::raw::c_int;
pub type nl_item = ::std::os::raw::c_int;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_uid: ::std::os::raw::c_int,
    pub pw_gid: gid_t,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
}
pub type jmp_buf = [::std::os::raw::c_int; 24usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 24usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgttyb {
    pub sg_flags: ::std::os::raw::c_int,
    pub sg_erase: ::std::os::raw::c_int,
    pub sg_kill: ::std::os::raw::c_int,
}
pub type div_t = ::std::os::raw::c_int;
pub type ldiv_t = ::std::os::raw::c_int;
pub type lldiv_t = ::std::os::raw::c_int;
pub type cc_t = ::std::os::raw::c_int;
pub type speed_t = ::std::os::raw::c_int;
pub type tcflag_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 42usize],
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
